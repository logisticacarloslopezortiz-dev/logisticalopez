-- =============================================================
--        NUEVO ESQUEMA OPTIMIZADO PARA LOGÍSTICA LÓPEZ ORTIZ
-- =============================================================
-- Autor: Gemini
-- Descripción: Esquema rediseñado para mayor escalabilidad,
--              seguridad con RLS y IDs amigables.
-- =============================================================

-- --------------------------------------------------------------
-- 1. TABLAS DE CONFIGURACIÓN (Catálogos)
-- --------------------------------------------------------------

-- Tabla de Vehículos
DROP TABLE IF EXISTS public.vehicles CASCADE;
CREATE TABLE public.vehicles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    image_url TEXT,
    is_active BOOLEAN DEFAULT true NOT NULL
);
COMMENT ON TABLE public.vehicles IS 'Catálogo de vehículos disponibles para los servicios.';

-- Tabla de Servicios
DROP TABLE IF EXISTS public.services CASCADE;
CREATE TABLE public.services (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    image_url TEXT,
    is_active BOOLEAN DEFAULT true NOT NULL,
    display_order INT
);
COMMENT ON TABLE public.services IS 'Catálogo de los servicios ofrecidos por el negocio.';

-- --------------------------------------------------------------
-- 2. GESTIÓN DE USUARIOS Y ROLES
-- --------------------------------------------------------------

-- Tabla de Perfiles (vinculada a auth.users de Supabase)
DROP TABLE IF EXISTS public.profiles CASCADE;
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT,
    role TEXT DEFAULT 'client' NOT NULL, -- Roles: owner, collaborator, client
    phone TEXT
);
COMMENT ON TABLE public.profiles IS 'Almacena datos públicos de los usuarios, como su rol y nombre.';

-- Tabla de Colaboradores (detalle extendido por encima de profiles.role)
-- Nota: profiles.role = 'collaborator' identifica el rol; esta tabla guarda datos operativos.
DROP TABLE IF EXISTS public.collaborators CASCADE;
CREATE TABLE public.collaborators (
    id UUID PRIMARY KEY REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    nombre TEXT,
    telefono TEXT,
    email TEXT,
    activo BOOLEAN DEFAULT true NOT NULL,
    push_subscription JSONB, -- para notifications.js / sw.js
    capacidades JSONB,       -- servicios/vehículos que puede operar
    notas TEXT
);
COMMENT ON TABLE public.collaborators IS 'Datos operativos de colaboradores, incluyendo suscripciones push y capacidades.';

-- Tabla de Matrícula (licencia/identificador del vehículo del colaborador)
DROP TABLE IF EXISTS public.matriculas CASCADE;
CREATE TABLE public.matriculas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    collaborator_id UUID NOT NULL REFERENCES public.collaborators(id) ON DELETE CASCADE,
    numero TEXT NOT NULL,          -- número de placa / matrícula
    tipo TEXT,                     -- tipo de vehículo
    vigente BOOLEAN DEFAULT true NOT NULL,
    vence_en DATE,
    documentos JSONB               -- URLs de fotos/pdf de documentos
);
COMMENT ON TABLE public.matriculas IS 'Matrículas/placas y documentos de los vehículos asociados a un colaborador.';

-- Índices útiles
CREATE INDEX IF NOT EXISTS idx_matriculas_collaborator ON public.matriculas(collaborator_id);
CREATE INDEX IF NOT EXISTS idx_collaborators_activo ON public.collaborators(activo);

-- Trigger para asegurar que el rol del profile sea 'collaborator' al insertar en collaborators
CREATE OR REPLACE FUNCTION public.ensure_profile_is_collaborator()
RETURNS TRIGGER AS $
BEGIN
  UPDATE public.profiles SET role = 'collaborator'
  WHERE id = NEW.id AND role <> 'collaborator';
  RETURN NEW;
END;
$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_collaborators_ensure_role ON public.collaborators;
CREATE TRIGGER trg_collaborators_ensure_role
AFTER INSERT ON public.collaborators
FOR EACH ROW EXECUTE FUNCTION public.ensure_profile_is_collaborator();

-- Función para obtener el rol de un usuario
CREATE OR REPLACE FUNCTION public.get_user_role(user_id UUID)
RETURNS TEXT AS $$
DECLARE
    role TEXT;
BEGIN
    SELECT p.role INTO role FROM public.profiles p WHERE p.id = user_id;
    RETURN role;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- --------------------------------------------------------------
-- 3. TABLA PRINCIPAL DE ÓRDENES (ORDERS)
-- --------------------------------------------------------------

-- Configuración de RLS para las tablas principales
-- Habilitar RLS en profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Políticas para profiles
CREATE POLICY "Los usuarios pueden ver su propio perfil" 
ON public.profiles FOR SELECT 
USING (auth.uid() = id);

CREATE POLICY "Los usuarios pueden actualizar su propio perfil" 
ON public.profiles FOR UPDATE 
USING (auth.uid() = id);

-- Habilitar RLS en collaborators
ALTER TABLE public.collaborators ENABLE ROW LEVEL SECURITY;

-- Políticas para collaborators
CREATE POLICY "Los colaboradores pueden ver su propio perfil" 
ON public.collaborators FOR SELECT 
USING (auth.uid() = id);

CREATE POLICY "Los administradores pueden ver todos los colaboradores" 
ON public.collaborators FOR SELECT 
USING (get_user_role(auth.uid()) = 'administrador');

CREATE POLICY "Los administradores pueden gestionar colaboradores" 
ON public.collaborators FOR ALL 
USING (get_user_role(auth.uid()) = 'administrador');

-- Secuencia para el ID corto y amigable
DROP SEQUENCE IF EXISTS public.orders_short_id_seq;
CREATE SEQUENCE public.orders_short_id_seq START WITH 1;

-- Función para generar el ID corto (ej: ORD-0001)
CREATE OR REPLACE FUNCTION public.generate_order_short_id()
RETURNS TEXT AS $$
DECLARE
    next_id BIGINT;
    short_id TEXT;
BEGIN
    next_id := nextval('public.orders_short_id_seq');
    short_id := 'ORD-' || lpad(next_id::TEXT, 4, '0');
    RETURN short_id;
END;
$$ LANGUAGE plpgsql;


-- Tabla de Órdenes
DROP TABLE IF EXISTS public.orders CASCADE;
CREATE TABLE public.orders (
    -- Identificadores
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    short_id TEXT UNIQUE DEFAULT public.generate_order_short_id(),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,

    -- Datos del cliente (puede ser anónimo o un usuario registrado)
    client_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    name TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT,
    rnc TEXT,
    empresa TEXT,

    -- Información del servicio
    service_id BIGINT REFERENCES public.services(id) ON DELETE SET NULL,
    vehicle_id BIGINT REFERENCES public.vehicles(id) ON DELETE SET NULL,
    service_questions JSONB,

    -- Ruta y geolocalización
    pickup TEXT,
    delivery TEXT,
    origin_coords JSONB,
    destination_coords JSONB,

    -- Fecha y hora
    "date" DATE,
    "time" TIME,

    -- Estado y asignación
    status TEXT DEFAULT 'Pendiente' NOT NULL,
    assigned_to UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    assigned_at TIMESTAMPTZ,

    -- Finalización y evidencia
    completed_at TIMESTAMPTZ,
    completed_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    evidence_photos JSONB,
    rating JSONB,

    -- Finanzas
    estimated_price TEXT DEFAULT 'Por confirmar',
    monto_cobrado NUMERIC,
    metodo_pago TEXT,
    
    -- Seguimiento
    tracking_data JSONB,
    tracking_url TEXT
);

COMMENT ON TABLE public.orders IS 'Tabla central para todas las órdenes de servicio.';
COMMENT ON COLUMN public.orders.short_id IS 'ID corto y amigable para seguimiento (ej: ORD-0001).';
COMMENT ON COLUMN public.orders.client_id IS 'Vincula la orden a un usuario registrado en el sistema.';
COMMENT ON COLUMN public.orders.assigned_to IS 'Colaborador asignado a la orden.';
COMMENT ON COLUMN public.orders.tracking_data IS 'Historial de cambios de estado para la vista del cliente.';
COMMENT ON COLUMN public.orders.tracking_url IS 'URL única para el seguimiento del cliente.';


-- --------------------------------------------------------------
-- 4. ÍNDICES PARA OPTIMIZACIÓN DE CONSULTAS
-- --------------------------------------------------------------
CREATE INDEX IF NOT EXISTS idx_orders_status ON public.orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_date ON public.orders("date");
CREATE INDEX IF NOT EXISTS idx_orders_assigned_to ON public.orders(assigned_to);
CREATE INDEX IF NOT EXISTS idx_orders_service_id ON public.orders(service_id);
CREATE INDEX IF NOT EXISTS idx_orders_client_id ON public.orders(client_id);


-- --------------------------------------------------------------
-- 5. POLÍTICAS DE SEGURIDAD (ROW LEVEL SECURITY - RLS)
-- --------------------------------------------------------------

-- Habilitar RLS en todas las tablas
ALTER TABLE public.vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.collaborators ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.matriculas ENABLE ROW LEVEL SECURITY;

-- Limpiar políticas antiguas
DROP POLICY IF EXISTS "public_read_access" ON public.vehicles;
DROP POLICY IF EXISTS "owner_all_access" ON public.vehicles;
DROP POLICY IF EXISTS "public_read_access" ON public.services;
DROP POLICY IF EXISTS "owner_all_access" ON public.services;
DROP POLICY IF EXISTS "public_read_profiles" ON public.profiles;
DROP POLICY IF EXISTS "users_can_update_own_profile" ON public.profiles;
DROP POLICY IF EXISTS "public_can_create_orders" ON public.orders;
DROP POLICY IF EXISTS "clients_can_read_own_orders" ON public.orders;
DROP POLICY IF EXISTS "collaborators_read_access" ON public.orders;
DROP POLICY IF EXISTS "collaborators_update_access" ON public.orders;
DROP POLICY IF EXISTS "owner_all_access" ON public.orders;
DROP POLICY IF EXISTS "public_read_collaborators" ON public.collaborators;
DROP POLICY IF EXISTS "owner_manage_collaborators" ON public.collaborators;
DROP POLICY IF EXISTS "collaborator_self_update" ON public.collaborators;
DROP POLICY IF EXISTS "owner_manage_matriculas" ON public.matriculas;
DROP POLICY IF EXISTS "collaborator_read_own_matriculas" ON public.matriculas;

-- Políticas para `vehicles` y `services`
CREATE POLICY "public_read_access" ON public.vehicles FOR SELECT USING (true);
CREATE POLICY "owner_all_access" ON public.vehicles FOR ALL USING (public.get_user_role(auth.uid()) = 'owner');

CREATE POLICY "public_read_access" ON public.services FOR SELECT USING (true);
CREATE POLICY "owner_all_access" ON public.services FOR ALL USING (public.get_user_role(auth.uid()) = 'owner');

-- Políticas para `profiles`
CREATE POLICY "public_read_profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "users_can_update_own_profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Políticas para `orders`
CREATE POLICY "public_can_create_orders" ON public.orders FOR INSERT WITH CHECK (true);
CREATE POLICY "clients_can_read_own_orders" ON public.orders FOR SELECT USING (client_id = auth.uid());
CREATE POLICY "collaborators_read_access" ON public.orders FOR SELECT USING (
    public.get_user_role(auth.uid()) = 'collaborator' AND (status = 'Pendiente' OR assigned_to = auth.uid())
);
CREATE POLICY "collaborators_update_access" ON public.orders FOR UPDATE USING (
    public.get_user_role(auth.uid()) = 'collaborator' AND assigned_to = auth.uid()
) WITH CHECK (assigned_to = auth.uid());
CREATE POLICY "owner_all_access" ON public.orders FOR ALL USING (public.get_user_role(auth.uid()) = 'owner');

-- Políticas para `collaborators`
CREATE POLICY "public_read_collaborators" ON public.collaborators FOR SELECT USING (true);
CREATE POLICY "owner_manage_collaborators" ON public.collaborators FOR ALL USING (public.get_user_role(auth.uid()) = 'owner');
CREATE POLICY "collaborator_self_update" ON public.collaborators FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Políticas para `matriculas`
CREATE POLICY "owner_manage_matriculas" ON public.matriculas FOR ALL USING (public.get_user_role(auth.uid()) = 'owner');
CREATE POLICY "collaborator_read_own_matriculas" ON public.matriculas FOR SELECT USING (collaborator_id = auth.uid());


-- --------------------------------------------------------------
-- 6. DATOS INICIALES (Seed Data)
-- --------------------------------------------------------------

-- Insertar vehículos (sin ID, se autogenera)
INSERT INTO public.vehicles (name, description, image_url, is_active) VALUES
('Camión Pequeño', '14 pies', 'https://i.postimg.cc/DynCkfnV/camionpequeno.jpg', true),
('Furgoneta', 'Ideal para paquetería y cargas ligeras', 'https://i.postimg.cc/RV4P5C9f/furgoneta.jpg', true),
('Grúa Vehicular', 'Para remolque de autos y jeepetas', 'https://i.postimg.cc/hvgBTFmy/grua-vehiculos.jpg', true),
('Camión Grande', '22 a 28 pies', 'https://i.postimg.cc/44z8SHCc/camiongrande.jpg', true),
('Grúa de Carga', 'Para izado y movimiento de carga', 'https://i.postimg.cc/0yHZwpSf/grua.png', true),
('Motor', 'Para paquetería y entregas rápidas', 'https://i.postimg.cc/JMNgTvmd/motor.jpg', true),
('Camión Abierto', 'Carga y transporte de materiales y mineros', 'https://i.postimg.cc/Kvx9ScFT/camionminero.jpg', true)
ON CONFLICT (name) DO NOTHING;

-- Insertar servicios (sin ID, se autogenera)
INSERT INTO public.services (name, description, image_url, is_active, display_order) VALUES
('Transporte Comercial', 'Transporte seguro de mercancías comerciales.', 'https://i.postimg.cc/sXCdCFTD/transporte-comercial.png', true, 1),
('Paquetería', 'Envíos de paquetes seguros y rápidos.', 'https://i.postimg.cc/zBYZYmx8/paqueteria.png', true, 2),
('Carga Pesada', 'Especialistas en transporte de carga pesada.', 'https://i.postimg.cc/B65b1fbv/pesado.jpg', true, 3),
('Flete', 'Servicios de flete a todo nivel nacional.', 'https://i.postimg.cc/15vQnj3w/flete.png', true, 4),
('Mudanza', 'Servicios completos de mudanza residencial y comercial.', 'https://i.postimg.cc/HszyJd5m/mudanza.jpg', true, 5),
('Grúa Vehículo', 'Servicio con grúa para vehículos.', 'https://i.postimg.cc/hvgBTFmy/grua-vehiculos.jpg', true, 6),
('Botes Mineros', 'Servicio de alquiler y transporte de botes para desechos.', 'https://i.postimg.cc/gzL29mkt/botes-minenos.png', true, 7),
('Grúa de Carga', 'Servicio con grúa para mover carga pesada.', 'https://i.postimg.cc/sDjz2rsx/grua-carga.png', true, 8)
ON CONFLICT (name) DO NOTHING;

-- =============================================================
--                      FIN DEL ESQUEMA
-- =============================================================n