-- =============================================================
--        ESQUEMA COMPLETO TLC (Redefinición solicitada)
-- =============================================================
-- Incluye tablas base, órdenes, colaboradores, notificaciones y
-- configuración del negocio con columna RNC, más políticas RLS
-- compatibles con el nuevo flujo de autenticación.
-- =============================================================

-- --------------------------------------------------------------
-- 1. EXTENSIONES Y CATÁLOGOS
-- --------------------------------------------------------------

-- Tabla de Vehículos
-- Extensiones útiles
create extension if not exists pgcrypto;

DROP TABLE IF EXISTS public.vehicles CASCADE;
CREATE TABLE public.vehicles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    image_url TEXT,
    is_active BOOLEAN DEFAULT true NOT NULL
);
COMMENT ON TABLE public.vehicles IS 'Catálogo de vehículos disponibles para los servicios.';

-- Tabla de Servicios
DROP TABLE IF EXISTS public.services CASCADE;
CREATE TABLE public.services (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    image_url TEXT,
    is_active BOOLEAN DEFAULT true NOT NULL,
    display_order INT
);
COMMENT ON TABLE public.services IS 'Catálogo de los servicios ofrecidos por el negocio.';

-- 2. USUARIOS Y COLABORADORES (sin usar roles)

-- Tabla de Perfiles (vinculada a auth.users de Supabase)
DROP TABLE IF EXISTS public.profiles CASCADE;
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    email TEXT,
    phone TEXT,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);
COMMENT ON TABLE public.profiles IS 'Datos públicos del usuario (sin roles); se usa Auth para panel del dueño.';

-- Tabla de Colaboradores (detalles de operación)
DROP TABLE IF EXISTS public.collaborators CASCADE;
CREATE TABLE public.collaborators (
    id UUID PRIMARY KEY REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    name TEXT,
    email TEXT,
    phone TEXT,
    matricula TEXT,
    status TEXT DEFAULT 'activo' NOT NULL,
    push_subscription JSONB,
    notes TEXT
);
COMMENT ON TABLE public.collaborators IS 'Datos operativos de colaboradores (sin columna de rol).';

-- Tabla de Matrícula (licencia/identificador del vehículo del colaborador)
DROP TABLE IF EXISTS public.matriculas CASCADE;
CREATE TABLE public.matriculas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    matricula TEXT NOT NULL,
    status TEXT DEFAULT 'activo' NOT NULL
);
COMMENT ON TABLE public.matriculas IS 'Matrículas/placas de los colaboradores (referencia directa a profiles.id).';

-- Índices útiles
CREATE INDEX IF NOT EXISTS idx_matriculas_user_id ON public.matriculas(user_id);
CREATE INDEX IF NOT EXISTS idx_collaborators_status ON public.collaborators(status);

-- Trigger para asegurar que el rol del profile sea 'collaborator' al insertar en collaborators
-- Actualiza updated_at automáticamente
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_profiles_set_updated on public.profiles;
create trigger trg_profiles_set_updated
before update on public.profiles
for each row execute function public.set_updated_at();

-- Función para obtener el rol de un usuario
-- (Se elimina lógica de roles; el control de dueño se hace vía business.owner_user_id)


-- --------------------------------------------------------------
-- 3. ORDERS
-- --------------------------------------------------------------

-- Habilitar RLS posteriormente (seccion 5)

-- Secuencia para el ID corto y amigable
DROP SEQUENCE IF EXISTS public.orders_short_id_seq;
CREATE SEQUENCE public.orders_short_id_seq START WITH 1;

-- Función para generar el ID corto (ej: ORD-0001)
CREATE OR REPLACE FUNCTION public.generate_order_short_id()
RETURNS TEXT AS $$
DECLARE
    next_id BIGINT;
    short_id TEXT;
BEGIN
    next_id := nextval('public.orders_short_id_seq');
    short_id := 'ORD-' || lpad(next_id::TEXT, 4, '0');
    RETURN short_id;
END;
$$ LANGUAGE plpgsql;


-- Tabla de Órdenes
DROP TABLE IF EXISTS public.orders CASCADE;
CREATE TABLE public.orders (
    -- Identificadores
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    short_id TEXT UNIQUE DEFAULT public.generate_order_short_id(),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,

    -- Datos del cliente (puede ser anónimo o un usuario registrado)
    client_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    name TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT,
    rnc TEXT,
    empresa TEXT,

    -- Información del servicio
    service_id BIGINT REFERENCES public.services(id) ON DELETE SET NULL,
    vehicle_id BIGINT REFERENCES public.vehicles(id) ON DELETE SET NULL,
    service_questions JSONB,

    -- Ruta y geolocalización
    pickup TEXT,
    delivery TEXT,
    origin_coords JSONB,
    destination_coords JSONB,

    -- Fecha y hora
    "date" DATE,
    "time" TIME,

    -- Estado y asignación
    status TEXT DEFAULT 'Pendiente' NOT NULL,
    assigned_to UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    assigned_at TIMESTAMPTZ,

    -- Finalización y evidencia
    completed_at TIMESTAMPTZ,
    completed_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    evidence_photos JSONB,
    rating JSONB,

    -- Finanzas
    estimated_price TEXT DEFAULT 'Por confirmar',
    monto_cobrado NUMERIC,
    metodo_pago TEXT,
    
    -- Seguimiento
    tracking_data JSONB,
    tracking_url TEXT
);

COMMENT ON TABLE public.orders IS 'Tabla central para todas las órdenes de servicio.';
COMMENT ON COLUMN public.orders.short_id IS 'ID corto y amigable para seguimiento (ej: ORD-0001).';
COMMENT ON COLUMN public.orders.client_id IS 'Vincula la orden a un usuario registrado en el sistema.';
COMMENT ON COLUMN public.orders.assigned_to IS 'Colaborador asignado a la orden.';
COMMENT ON COLUMN public.orders.tracking_data IS 'Historial de cambios de estado para la vista del cliente.';
COMMENT ON COLUMN public.orders.tracking_url IS 'URL única para el seguimiento del cliente.';


-- 4. ÍNDICES PARA OPTIMIZACIÓN DE CONSULTAS
CREATE INDEX IF NOT EXISTS idx_orders_status ON public.orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_date ON public.orders("date");
CREATE INDEX IF NOT EXISTS idx_orders_assigned_to ON public.orders(assigned_to);
CREATE INDEX IF NOT EXISTS idx_orders_service_id ON public.orders(service_id);
CREATE INDEX IF NOT EXISTS idx_orders_client_id ON public.orders(client_id);

-- 4.b Notificaciones y suscripciones push
DROP TABLE IF EXISTS public.notifications CASCADE;
CREATE TABLE public.notifications (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade,
  title text,
  body text,
  data jsonb,
  created_at timestamptz not null default now(),
  read_at timestamptz
);

DROP TABLE IF EXISTS public.push_subscriptions CASCADE;
CREATE TABLE public.push_subscriptions (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade,
  endpoint text not null,
  keys jsonb not null,
  created_at timestamptz not null default now()
);
create index if not exists idx_push_subscriptions_user on public.push_subscriptions(user_id);


-- 5. POLÍTICAS DE SEGURIDAD (RLS)

-- Habilitar RLS en todas las tablas
ALTER TABLE public.vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.collaborators ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.matriculas ENABLE ROW LEVEL SECURITY;

-- Limpiar políticas antiguas
DROP POLICY IF EXISTS "public_read_access" ON public.vehicles;
DROP POLICY IF EXISTS "owner_all_access" ON public.vehicles;
DROP POLICY IF EXISTS "public_read_access" ON public.services;
DROP POLICY IF EXISTS "owner_all_access" ON public.services;
DROP POLICY IF EXISTS "public_read_profiles" ON public.profiles;
DROP POLICY IF EXISTS "users_can_update_own_profile" ON public.profiles;
DROP POLICY IF EXISTS "public_can_create_orders" ON public.orders;
DROP POLICY IF EXISTS "clients_can_read_own_orders" ON public.orders;
DROP POLICY IF EXISTS "collaborator_select_pending" ON public.orders;
DROP POLICY IF EXISTS "collaborator_claim_pending" ON public.orders;
DROP POLICY IF EXISTS "collaborator_update_own_assigned" ON public.orders;
DROP POLICY IF EXISTS "owner_all_access" ON public.orders;
DROP POLICY IF EXISTS "collaborator_self_select" ON public.collaborators;
DROP POLICY IF EXISTS "owner_manage_collaborators" ON public.collaborators;
DROP POLICY IF EXISTS "collaborator_self_update" ON public.collaborators;
DROP POLICY IF EXISTS "owner_manage_matriculas" ON public.matriculas;
DROP POLICY IF EXISTS "collaborator_read_own_matriculas" ON public.matriculas;

-- Políticas para `vehicles` y `services`
CREATE POLICY "public_read_access" ON public.vehicles FOR SELECT USING (true);
CREATE POLICY "owner_all_access" ON public.vehicles FOR ALL USING (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);

CREATE POLICY "public_read_access" ON public.services FOR SELECT USING (true);
CREATE POLICY "owner_all_access" ON public.services FOR ALL USING (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);

-- Políticas para `profiles`
CREATE POLICY "public_read_profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "users_can_update_own_profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Políticas para `orders`
CREATE POLICY "public_can_create_orders" ON public.orders FOR INSERT WITH CHECK (true);
CREATE POLICY "clients_can_read_own_orders" ON public.orders FOR SELECT USING (client_id = auth.uid());
CREATE POLICY "collaborator_select_pending" ON public.orders FOR SELECT USING (
  assigned_to is null and lower(trim(status)) = 'pendiente'
);
CREATE POLICY "collaborator_update_own_assigned" ON public.orders FOR UPDATE USING (
  assigned_to = auth.uid() and lower(trim(status)) != 'completado'
) WITH CHECK (
  assigned_to = auth.uid() and lower(trim(status)) != 'completado'
);
CREATE POLICY "owner_all_access" ON public.orders FOR ALL USING (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);

-- Políticas para `collaborators`
CREATE POLICY "collaborator_self_select" ON public.collaborators FOR SELECT USING (auth.uid() = id);
CREATE POLICY "owner_manage_collaborators" ON public.collaborators FOR ALL USING (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);
CREATE POLICY "collaborator_self_update" ON public.collaborators FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Políticas para `matriculas`
CREATE POLICY "owner_manage_matriculas" ON public.matriculas FOR ALL USING (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);
CREATE POLICY "collaborator_read_own_matriculas" ON public.matriculas FOR SELECT USING (user_id = auth.uid());


-- 6. CONFIGURACIÓN DEL NEGOCIO + Seed

-- Insertar vehículos (sin ID, se autogenera)
INSERT INTO public.vehicles (name, description, image_url, is_active) VALUES
('Camión Pequeño', '14 pies', 'https://i.postimg.cc/DynCkfnV/camionpequeno.jpg', true),
('Furgoneta', 'Ideal para paquetería y cargas ligeras', 'https://i.postimg.cc/RV4P5C9f/furgoneta.jpg', true),
('Grúa Vehicular', 'Para remolque de autos y jeepetas', 'https://i.postimg.cc/hvgBTFmy/grua-vehiculos.jpg', true),
('Camión Grande', '22 a 28 pies', 'https://i.postimg.cc/44z8SHCc/camiongrande.jpg', true),
('Grúa de Carga', 'Para izado y movimiento de carga', 'https://i.postimg.cc/0yHZwpSf/grua.png', true),
('Motor', 'Para paquetería y entregas rápidas', 'https://i.postimg.cc/JMNgTvmd/motor.jpg', true),
('Camión Abierto', 'Carga y transporte de materiales y mineros', 'https://i.postimg.cc/Kvx9ScFT/camionminero.jpg', true)
ON CONFLICT (name) DO NOTHING;

-- Insertar servicios (sin ID, se autogenera)
INSERT INTO public.services (name, description, image_url, is_active, display_order) VALUES
('Transporte Comercial', 'Transporte seguro de mercancías comerciales.', 'https://i.postimg.cc/sXCdCFTD/transporte-comercial.png', true, 1),
('Paquetería', 'Envíos de paquetes seguros y rápidos.', 'https://i.postimg.cc/zBYZYmx8/paqueteria.png', true, 2),
('Carga Pesada', 'Especialistas en transporte de carga pesada.', 'https://i.postimg.cc/B65b1fbv/pesado.jpg', true, 3),
('Flete', 'Servicios de flete a todo nivel nacional.', 'https://i.postimg.cc/15vQnj3w/flete.png', true, 4),
('Mudanza', 'Servicios completos de mudanza residencial y comercial.', 'https://i.postimg.cc/HszyJd5m/mudanza.jpg', true, 5),
('Grúa Vehículo', 'Servicio con grúa para vehículos.', 'https://i.postimg.cc/hvgBTFmy/grua-vehiculos.jpg', true, 6),
('Botes Mineros', 'Servicio de alquiler y transporte de botes para desechos.', 'https://i.postimg.cc/gzL29mkt/botes-minenos.png', true, 7),
('Grúa de Carga', 'Servicio con grúa para mover carga pesada.', 'https://i.postimg.cc/sDjz2rsx/grua-carga.png', true, 8)
ON CONFLICT (name) DO NOTHING;

-- Tabla de configuración del negocio (incluye RNC y dueño)
DROP TABLE IF EXISTS public.business CASCADE;
CREATE TABLE public.business (
  id integer primary key default 1,
  business_name text,
  address text,
  phone text,
  email text,
  rnc text,
  quotation_rates jsonb,
  owner_user_id uuid references public.profiles(id) on delete set null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- RLS: Sólo el dueño puede ver/modificar
alter table public.business enable row level security;
drop policy if exists "owner full access business" on public.business;
create policy "owner full access business" on public.business
for all using (
  exists (select 1 from public.business where owner_user_id = auth.uid())
) with check (
  exists (select 1 from public.business where owner_user_id = auth.uid())
);

-- Trigger para updated_at
create or replace function public.touch_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_business_touch_updated on public.business;
create trigger trg_business_touch_updated
before update on public.business
for each row execute function public.touch_updated_at();

-- Seed de business si no existe
insert into public.business (id, business_name, address, phone, email)
values (1, 'Mi Negocio', '', '', '')
on conflict (id) do nothing;

-- Índices adicionales
create index if not exists idx_business_owner on public.business(owner_user_id);
create index if not exists idx_business_rnc on public.business(rnc);

-- =============================================================
--                      FIN DEL ESQUEMA
-- =============================================================