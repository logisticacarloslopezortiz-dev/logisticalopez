-- Crear la tabla de facturas (invoices) que falta
DROP TABLE IF EXISTS public.invoices CASCADE;
CREATE TABLE public.invoices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    order_id BIGINT REFERENCES public.orders(id) ON DELETE SET NULL,
    invoice_number TEXT UNIQUE,
    amount DECIMAL(10, 2) NOT NULL,
    status TEXT DEFAULT 'pendiente' NOT NULL,
    issue_date TIMESTAMPTZ DEFAULT now() NOT NULL,
    due_date TIMESTAMPTZ,
    payment_date TIMESTAMPTZ,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_invoices_client_id ON public.invoices(client_id);
CREATE INDEX IF NOT EXISTS idx_invoices_order_id ON public.invoices(order_id);
CREATE INDEX IF NOT EXISTS idx_invoices_status ON public.invoices(status);

-- Trigger para actualizar el campo updated_at
DROP TRIGGER IF EXISTS trg_invoices_touch_updated ON public.invoices;
CREATE TRIGGER trg_invoices_touch_updated
BEFORE UPDATE ON public.invoices
FOR EACH ROW EXECUTE FUNCTION public.touch_updated_at();

-- Políticas de seguridad (RLS)
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;

-- Política para clientes: solo pueden ver sus propias facturas
CREATE POLICY "clients_view_own_invoices" ON public.invoices
FOR SELECT USING (client_id = auth.uid());

-- Política para administradores: acceso completo
CREATE POLICY "admin_all_invoices" ON public.invoices
FOR ALL USING (
  public.is_owner(auth.uid()) OR public.is_admin(auth.uid())
) WITH CHECK (
  public.is_owner(auth.uid()) OR public.is_admin(auth.uid())
);

-- Crear bucket de almacenamiento para facturas si no existe
-- Nota: Esto debe ejecutarse manualmente en la consola de Supabase
-- Storage -> New Bucket -> Name: invoices -> Set public: false -> Create