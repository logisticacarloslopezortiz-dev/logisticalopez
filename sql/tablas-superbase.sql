-- =============================================================
--        ESQUEMA COMPLETO Y MEJORADO PARA SUPABASE
--        Archivo: tablas-superbase.sql
-- =============================================================
-- Este archivo contiene la definición completa de tablas,
-- funciones, triggers y políticas de seguridad (RLS) para
-- el proyecto de logística, asegurando su correcto funcionamiento
-- y seguridad.
-- =============================================================

-- --------------------------------------------------------------
-- 1. EXTENSIONES Y FUNCIONES DE UTILIDAD
-- --------------------------------------------------------------

-- Habilitar la extensión para generar UUIDs y usar criptografía si es necesario.
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Función para actualizar automáticamente el campo 'updated_at' en cualquier tabla.
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- --------------------------------------------------------------
-- 2. TABLAS PRINCIPALES (Perfiles, Colaboradores, Órdenes)
-- --------------------------------------------------------------

-- Perfiles de usuario (vinculado a auth.users). Almacena datos públicos.
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  email TEXT,
  phone TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_jobs INT DEFAULT 0
);
COMMENT ON TABLE public.profiles IS 'Almacena el perfil público de todos los usuarios registrados en auth.users.';

-- Colaboradores (rol específico dentro de la aplicación).
CREATE TABLE IF NOT EXISTS public.collaborators (
  id UUID PRIMARY KEY REFERENCES public.profiles(id) ON DELETE CASCADE,
  name TEXT,
  email TEXT UNIQUE,
  phone TEXT,
  matricula TEXT,
  status TEXT NOT NULL DEFAULT 'activo' CHECK (status IN ('activo', 'inactivo')),
  role TEXT NOT NULL DEFAULT 'colaborador' CHECK (role IN ('administrador', 'colaborador')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.collaborators IS 'Define a los usuarios que tienen roles de trabajo en la aplicación.';

-- Órdenes de servicio.
CREATE TABLE IF NOT EXISTS public.orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  short_id TEXT UNIQUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  client_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  phone TEXT NOT NULL,
  email TEXT,
  rnc TEXT,
  empresa TEXT,
  service_id BIGINT,
  vehicle_id BIGINT,
  service_questions JSONB,
  pickup TEXT,
  delivery TEXT,
  origin_coords JSONB,
  destination_coords JSONB,
  "date" DATE,
  "time" TIME,
  status TEXT NOT NULL DEFAULT 'Pendiente',
  last_collab_status TEXT,
  assigned_to UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  assigned_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ,
  completed_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  evidence_photos JSONB,
  rating INT,
  rating_comment TEXT,
  monto_cobrado NUMERIC,
  metodo_pago TEXT,
  tracking_data JSONB,
  tracking_url TEXT
);
COMMENT ON TABLE public.orders IS 'Tabla principal que contiene todas las solicitudes de servicio.';

-- --------------------------------------------------------------
-- 3. TABLAS DE CONFIGURACIÓN Y CATÁLOGOS
-- --------------------------------------------------------------

-- Configuración del negocio.
CREATE TABLE IF NOT EXISTS public.business (
  id INT PRIMARY KEY DEFAULT 1,
  business_name TEXT,
  address TEXT,
  phone TEXT,
  email TEXT,
  rnc TEXT,
  owner_user_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.business IS 'Configuración general del negocio (nombre, dirección, dueño).';

-- Catálogo de vehículos.
CREATE TABLE IF NOT EXISTS public.vehicles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  image_url TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Catálogo de servicios.
CREATE TABLE IF NOT EXISTS public.services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  image_url TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- --------------------------------------------------------------
-- 4. TABLAS DE NOTIFICACIONES Y FACTURACIÓN
-- --------------------------------------------------------------

-- Suscripciones a notificaciones push.
CREATE TABLE IF NOT EXISTS public.push_subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  endpoint TEXT NOT NULL UNIQUE,
  keys JSONB NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.push_subscriptions IS 'Almacena las suscripciones de los usuarios para notificaciones push.';

-- Facturas.
CREATE TABLE IF NOT EXISTS public.invoices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
  client_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  invoice_number TEXT UNIQUE,
  status TEXT NOT NULL DEFAULT 'draft',
  total NUMERIC,
  file_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.invoices IS 'Registro de las facturas generadas para las órdenes.';

-- --------------------------------------------------------------
-- 5. TRIGGERS
-- --------------------------------------------------------------

-- Asignar triggers de 'updated_at' a todas las tablas que lo necesiten.
DROP TRIGGER IF EXISTS on_profiles_updated ON public.profiles;
CREATE TRIGGER on_profiles_updated BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

DROP TRIGGER IF EXISTS on_collaborators_updated ON public.collaborators;
CREATE TRIGGER on_collaborators_updated BEFORE UPDATE ON public.collaborators FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

DROP TRIGGER IF EXISTS on_orders_updated ON public.orders;
CREATE TRIGGER on_orders_updated BEFORE UPDATE ON public.orders FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

DROP TRIGGER IF EXISTS on_business_updated ON public.business;
CREATE TRIGGER on_business_updated BEFORE UPDATE ON public.business FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

DROP TRIGGER IF EXISTS on_invoices_updated ON public.invoices;
CREATE TRIGGER on_invoices_updated BEFORE UPDATE ON public.invoices FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- --------------------------------------------------------------
-- 6. FUNCIONES DE AYUDA PARA POLÍTICAS RLS
-- --------------------------------------------------------------

-- Función para verificar si un usuario es el dueño del negocio.
CREATE OR REPLACE FUNCTION public.is_business_owner(user_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM public.business WHERE owner_user_id = user_id
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Función para verificar si un usuario es administrador.
CREATE OR REPLACE FUNCTION public.is_admin(user_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM public.collaborators WHERE id = user_id AND role = 'administrador'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- --------------------------------------------------------------
-- 7. POLÍTICAS DE SEGURIDAD (ROW LEVEL SECURITY - RLS)
-- --------------------------------------------------------------

-- Habilitar RLS en todas las tablas.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.collaborators ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.business ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.push_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;

-- --- Políticas para 'profiles' ---
DROP POLICY IF EXISTS "Allow public read access" ON public.profiles;
CREATE POLICY "Allow public read access" ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow user to update own profile" ON public.profiles;
CREATE POLICY "Allow user to update own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- --- Políticas para 'collaborators' ---
-- COMENTARIO: Esta política es CRÍTICA para que el dueño pueda crear colaboradores desde el panel.
-- Permite a dueños o administradores ver y gestionar a todos los colaboradores.
DROP POLICY IF EXISTS "Allow owner/admin full access to collaborators" ON public.collaborators;
CREATE POLICY "Allow owner/admin full access to collaborators" ON public.collaborators
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- Permite a los colaboradores ver sus propios datos.
DROP POLICY IF EXISTS "Allow collaborator to see own data" ON public.collaborators;
CREATE POLICY "Allow collaborator to see own data" ON public.collaborators
  FOR SELECT USING (auth.uid() = id);

-- --- Políticas para 'orders' ---
-- Cualquiera puede crear una orden (cliente anónimo o registrado).
DROP POLICY IF EXISTS "Allow anyone to create an order" ON public.orders;
CREATE POLICY "Allow anyone to create an order" ON public.orders FOR INSERT WITH CHECK (true);

-- Dueños y administradores tienen acceso total a las órdenes.
DROP POLICY IF EXISTS "Allow owner/admin full access to orders" ON public.orders;
CREATE POLICY "Allow owner/admin full access to orders" ON public.orders
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- Los colaboradores pueden ver las órdenes pendientes y las que tienen asignadas.
DROP POLICY IF EXISTS "Allow collaborators to view relevant orders" ON public.orders;
CREATE POLICY "Allow collaborators to view relevant orders" ON public.orders
  FOR SELECT USING (status = 'Pendiente' OR assigned_to = auth.uid());

-- Los colaboradores solo pueden actualizar las órdenes que tienen asignadas.
DROP POLICY IF EXISTS "Allow collaborators to update assigned orders" ON public.orders;
CREATE POLICY "Allow collaborators to update assigned orders" ON public.orders
  FOR UPDATE USING (assigned_to = auth.uid());

-- --- Políticas para 'push_subscriptions' ---
-- COMENTARIO: Permite a los usuarios gestionar sus propias suscripciones, necesario para las notificaciones.
DROP POLICY IF EXISTS "Allow user to manage own push subscriptions" ON public.push_subscriptions;
CREATE POLICY "Allow user to manage own push subscriptions" ON public.push_subscriptions
  FOR ALL USING (auth.uid() = user_id);

-- --- Políticas para 'invoices' ---
-- COMENTARIO: Permite a las funciones (con rol de servicio) crear facturas sin restricciones de RLS.
-- Dueños y administradores pueden gestionar todas las facturas.
DROP POLICY IF EXISTS "Allow owner/admin full access to invoices" ON public.invoices;
CREATE POLICY "Allow owner/admin full access to invoices" ON public.invoices
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- --- Políticas para tablas de catálogo ('vehicles', 'services') ---
-- Todos pueden leer los catálogos de vehículos y servicios.
DROP POLICY IF EXISTS "Allow public read access for vehicles" ON public.vehicles;
CREATE POLICY "Allow public read access for vehicles" ON public.vehicles FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow public read access for services" ON public.services;
CREATE POLICY "Allow public read access for services" ON public.services FOR SELECT USING (true);

-- Solo dueños y administradores pueden modificar los catálogos.
DROP POLICY IF EXISTS "Allow owner/admin to manage vehicles" ON public.vehicles;
CREATE POLICY "Allow owner/admin to manage vehicles" ON public.vehicles
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));
DROP POLICY IF EXISTS "Allow owner/admin to manage services" ON public.services;
CREATE POLICY "Allow owner/admin to manage services" ON public.services
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- --- Políticas para 'business' ---
-- Cualquiera puede leer la información del negocio.
DROP POLICY IF EXISTS "Allow public read access for business" ON public.business;
CREATE POLICY "Allow public read access for business" ON public.business FOR SELECT USING (true);
-- Solo el dueño o un admin puede modificar la configuración del negocio.
DROP POLICY IF EXISTS "Allow owner/admin to manage business" ON public.business;
CREATE POLICY "Allow owner/admin to manage business" ON public.business
  FOR ALL USING (public.is_business_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- =============================================================
--                      FIN DEL ESQUEMA
-- =============================================================
