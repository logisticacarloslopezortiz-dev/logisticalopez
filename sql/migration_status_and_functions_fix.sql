-- =============================================================
-- MIGRACIÓN: Normalización de estados de orders y utilidades para Edge Functions
-- Objetivo:
--  - Evitar errores 23514 (violación de orders_status_check)
--  - Normalizar y validar estados con un set controlado y trigger
--  - Ajustar RLS para updates de estado por colaboradores/admin
--  - Agregar tabla simple de logs para depuración de Edge Functions (opcional)
-- =============================================================

-- 1) Ampliar temporalmente el constraint de status para permitir variantes usadas
DO $$ BEGIN
  IF EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'orders_status_check') THEN
    ALTER TABLE public.orders DROP CONSTRAINT orders_status_check;
  END IF;
END $$;

-- 2) Crear ENUM opcional o mantener TEXT con CHECK. Usaremos TEXT+CHECK + trigger de normalización.
-- Catálogo de estados permitidos canónicos
-- Pendiente, Aceptada, En curso, Completada, Cancelada
-- Consideraremos variantes comunes: 'Aceptado', 'en_progreso', 'en curso', 'ACEPTADA', etc.

-- 3) Función de normalización de estado
CREATE OR REPLACE FUNCTION public.normalize_order_status(in_status text)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
  s text := trim(both from coalesce(in_status, ''));
BEGIN
  IF s = '' THEN
    RETURN 'Pendiente';
  END IF;
  s := replace(lower(s), '_', ' ');

  -- mapear variantes a canónicos
  IF s IN ('pendiente') THEN RETURN 'Pendiente'; END IF;
  IF s IN ('aceptada','aceptado','aceptar','accepted') THEN RETURN 'Aceptada'; END IF;
  IF s IN ('en curso','en progreso','en proceso','en transito','en tránsito') THEN RETURN 'En curso'; END IF;
  IF s IN ('completada','completado','finalizada','terminada') THEN RETURN 'Completada'; END IF;
  IF s IN ('cancelada','cancelado','anulada') THEN RETURN 'Cancelada'; END IF;

  -- Si llega algo desconocido, forzar a 'Pendiente' para no romper flujos
  RETURN 'Pendiente';
END $$;

-- 4) Trigger BEFORE INSERT/UPDATE para normalizar y validar
CREATE OR REPLACE FUNCTION public.orders_status_guard()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.status := public.normalize_order_status(NEW.status);
  -- Validación final
  IF NEW.status NOT IN ('Pendiente','Aceptada','En curso','Completada','Cancelada') THEN
    RAISE EXCEPTION 'Estado no permitido: %', NEW.status USING ERRCODE = '23514';
  END IF;
  RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS trg_orders_status_guard ON public.orders;
CREATE TRIGGER trg_orders_status_guard
BEFORE INSERT OR UPDATE ON public.orders
FOR EACH ROW EXECUTE FUNCTION public.orders_status_guard();

-- 5) Reaplicar CHECK para asegurar integridad futura
ALTER TABLE public.orders
  ADD CONSTRAINT orders_status_check
  CHECK (status IN ('Pendiente','Aceptada','En curso','Completada','Cancelada'));

-- 6) Normalizar datos existentes a canónicos
UPDATE public.orders
SET status = public.normalize_order_status(status)
WHERE status IS NOT NULL;

-- 7) RLS: asegurar que colaboradores/admin puedan actualizar su orden a estados válidos
-- Ya existe collaborator_update_own_orders (assigned_to = auth.uid()). La dejamos.
-- Reforzamos owner/admin all access por si necesitan corregir estados
DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='orders' AND policyname='owner_admin_all_orders'
  ) THEN
    EXECUTE $$CREATE POLICY "owner_admin_all_orders" ON public.orders FOR ALL USING (
      public.is_owner(auth.uid()) OR public.is_admin(auth.uid())
    )$$;
  END IF;
END $$;

-- 8) Tabla simple de logs para Edge Functions (opcional)
CREATE TABLE IF NOT EXISTS public.function_logs (
  id bigint generated by default as identity primary key,
  fn_name text not null,
  level text not null default 'error',
  message text,
  payload jsonb,
  created_at timestamptz not null default now()
);

-- Policy: solo admin/owner puede leer; service_role escribe sin RLS
ALTER TABLE public.function_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS function_logs_read_admin ON public.function_logs;
CREATE POLICY function_logs_read_admin ON public.function_logs
FOR SELECT USING (public.is_owner(auth.uid()) OR public.is_admin(auth.uid()));

-- 9) Nota de integración frontend/backend
-- - En inserts, no envíes status o envía 'Pendiente'.
-- - En updates desde panel-colaborador, puedes enviar 'Aceptada' o 'En curso' y el trigger lo normaliza
--   aunque llegue 'aceptado' o 'en_progreso'.
-- - Si tu Edge Function cambia estados, no se verá afectada si corre con service_role.

-- FIN MIGRACIÓN
